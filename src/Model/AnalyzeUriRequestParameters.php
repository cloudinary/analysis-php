<?php
/**
 * AnalyzeUriRequestParameters
 *
 * PHP version 8.1
 *
 * @package  Cloudinary\Analysis
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Analyze API (Beta)
 *
 * Use the Analyze API to analyze any external asset and return details based on the type of analysis requested.  Currently supports the following analysis options:   * [Google tagging](https://cloudinary.com/documentation/google_auto_tagging_addon)   * [Captioning](https://cloudinary.com/documentation/cloudinary_ai_content_analysis_addon#ai_based_image_captioning)   * [Cld Fashion](https://cloudinary.com/documentation/cloudinary_ai_content_analysis_addon#supported_content_aware_detection_models)   * [Coco](https://cloudinary.com/documentation/cloudinary_ai_content_analysis_addon#supported_content_aware_detection_models)   * [Lvis](https://cloudinary.com/documentation/cloudinary_ai_content_analysis_addon#supported_content_aware_detection_models)   * [Unidet](https://cloudinary.com/documentation/cloudinary_ai_content_analysis_addon#supported_content_aware_detection_models)   * [Human Anatomy](https://cloudinary.com/documentation/cloudinary_ai_content_analysis_addon#supported_content_aware_detection_models)   * [Cld Text](https://cloudinary.com/documentation/cloudinary_ai_content_analysis_addon#supported_content_aware_detection_models)   * [Shop Classifier](https://cloudinary.com/documentation/cloudinary_ai_content_analysis_addon#supported_content_aware_detection_models)    **Notes**:    * The Analyze API is currently in development and is available as a Public Beta, which means we value your feedback, so please feel free to [share any thoughts with us](https://support.cloudinary.com/hc/en-us/requests/new).   * The analysis options require an active subscription to the relevant add-on. Learn more about [registering for add-ons](https://cloudinary.com/documentation/cloudinary_add_ons#registering_for_add_ons).    The API supports both Basic Authentication using your Cloudinary API Key and API Secret (which can be found on the Dashboard page of your [Cloudinary Console](https://console.cloudinary.com/pm)) or OAuth2 ([Contact support](https://support.cloudinary.com/hc/en-us/requests/new) for more information regarding OAuth).
 *
 * The version of the OpenAPI document: 0.0.3
 * @generated Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Cloudinary\Analysis\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use Cloudinary\Analysis\ObjectSerializer;

/**
 * AnalyzeUriRequestParameters Class Doc Comment
 *
 * @package  Cloudinary\Analysis
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class AnalyzeUriRequestParameters implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'AnalyzeUriRequestParameters';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'vqaTagging' => '\Cloudinary\Analysis\Model\VQATaggingParameters',
        'vqaModeration' => '\Cloudinary\Analysis\Model\VQAModerationParameters',
        'vqaGeneral' => '\Cloudinary\Analysis\Model\VQAGeneralParameters',
        'custom' => '\Cloudinary\Analysis\Model\CustomParameters'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'vqaTagging' => null,
        'vqaModeration' => null,
        'vqaGeneral' => null,
        'custom' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'vqaTagging' => false,
        'vqaModeration' => false,
        'vqaGeneral' => false,
        'custom' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'vqaTagging' => 'vqa_tagging',
        'vqaModeration' => 'vqa_moderation',
        'vqaGeneral' => 'vqa_general',
        'custom' => 'custom'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'vqaTagging' => 'setVqaTagging',
        'vqaModeration' => 'setVqaModeration',
        'vqaGeneral' => 'setVqaGeneral',
        'custom' => 'setCustom'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'vqaTagging' => 'getVqaTagging',
        'vqaModeration' => 'getVqaModeration',
        'vqaGeneral' => 'getVqaGeneral',
        'custom' => 'getCustom'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('vqaTagging', $data ?? [], null);
        $this->setIfExists('vqaModeration', $data ?? [], null);
        $this->setIfExists('vqaGeneral', $data ?? [], null);
        $this->setIfExists('custom', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets vqaTagging
     *
     * @return \Cloudinary\Analysis\Model\VQATaggingParameters|null
     */
    public function getVqaTagging(): ?\Cloudinary\Analysis\Model\VQATaggingParameters
    {
        return $this->container['vqaTagging'];
    }

    /**
     * Sets vqaTagging
     *
     * @param \Cloudinary\Analysis\Model\VQATaggingParameters|null $vqaTagging vqaTagging
     *
     * @return $this
     */
    public function setVqaTagging(?\Cloudinary\Analysis\Model\VQATaggingParameters $vqaTagging): static
    {
        if (is_null($vqaTagging)) {
            throw new InvalidArgumentException('non-nullable vqaTagging cannot be null');
        }
        $this->container['vqaTagging'] = $vqaTagging;

        return $this;
    }

    /**
     * Gets vqaModeration
     *
     * @return \Cloudinary\Analysis\Model\VQAModerationParameters|null
     */
    public function getVqaModeration(): ?\Cloudinary\Analysis\Model\VQAModerationParameters
    {
        return $this->container['vqaModeration'];
    }

    /**
     * Sets vqaModeration
     *
     * @param \Cloudinary\Analysis\Model\VQAModerationParameters|null $vqaModeration vqaModeration
     *
     * @return $this
     */
    public function setVqaModeration(?\Cloudinary\Analysis\Model\VQAModerationParameters $vqaModeration): static
    {
        if (is_null($vqaModeration)) {
            throw new InvalidArgumentException('non-nullable vqaModeration cannot be null');
        }
        $this->container['vqaModeration'] = $vqaModeration;

        return $this;
    }

    /**
     * Gets vqaGeneral
     *
     * @return \Cloudinary\Analysis\Model\VQAGeneralParameters|null
     */
    public function getVqaGeneral(): ?\Cloudinary\Analysis\Model\VQAGeneralParameters
    {
        return $this->container['vqaGeneral'];
    }

    /**
     * Sets vqaGeneral
     *
     * @param \Cloudinary\Analysis\Model\VQAGeneralParameters|null $vqaGeneral vqaGeneral
     *
     * @return $this
     */
    public function setVqaGeneral(?\Cloudinary\Analysis\Model\VQAGeneralParameters $vqaGeneral): static
    {
        if (is_null($vqaGeneral)) {
            throw new InvalidArgumentException('non-nullable vqaGeneral cannot be null');
        }
        $this->container['vqaGeneral'] = $vqaGeneral;

        return $this;
    }

    /**
     * Gets custom
     *
     * @return \Cloudinary\Analysis\Model\CustomParameters|null
     */
    public function getCustom(): ?\Cloudinary\Analysis\Model\CustomParameters
    {
        return $this->container['custom'];
    }

    /**
     * Sets custom
     *
     * @param \Cloudinary\Analysis\Model\CustomParameters|null $custom custom
     *
     * @return $this
     */
    public function setCustom(?\Cloudinary\Analysis\Model\CustomParameters $custom): static
    {
        if (is_null($custom)) {
            throw new InvalidArgumentException('non-nullable custom cannot be null');
        }
        $this->container['custom'] = $custom;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


